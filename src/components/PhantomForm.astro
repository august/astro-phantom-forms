---
/**
 * PhantomForm.astro
 * ------------------
 * Hide forms from bots. Show them to humans.
 * 
 * Props:
 * @prop {'load'|'idle'|'visible'} [mode='visible']
 */
export interface Props {
  mode?: 'load' | 'idle' | 'visible';
}

const { mode = 'visible' } = Astro.props;

if (mode === 'server') {
  throw new Error("ðŸš« mode='server' disables hydration â€” defeats PhantomForm's purpose.");
}
---

<!-- This component renders nothing during SSR -->
<!-- Forms are injected client-side only -->
<phantom-form data-mode={mode}>
  <template><slot /></template>
</phantom-form>

<script>
  class PhantomFormElement extends HTMLElement {
    connectedCallback() {
      const mode = this.getAttribute('data-mode') || 'visible';
      const template = this.querySelector('template');
      
      if (!template) return;
      
      const hydrateForm = () => {
        const content = template.content.cloneNode(true);
        this.appendChild(content);
        template.remove();
      };
      
      if (mode === 'load') {
        hydrateForm();
      } else if (mode === 'idle') {
        if ('requestIdleCallback' in window) {
          requestIdleCallback(hydrateForm);
        } else {
          setTimeout(hydrateForm, 200);
        }
      } else if (mode === 'visible') {
        if ('IntersectionObserver' in window) {
          const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
              hydrateForm();
              observer.disconnect();
            }
          });
          observer.observe(this);
        } else {
          hydrateForm();
        }
      }
    }
  }
  
  customElements.define('phantom-form', PhantomFormElement);
</script>